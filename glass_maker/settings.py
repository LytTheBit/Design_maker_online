"""
Django settings for glass_maker project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from pathlib import Path as _Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Directory for media files

LORA_MODELS_DIR = Path(
    os.environ.get(
        "LORA_MODELS_DIR",
        BASE_DIR.parent / "progetto-tesi-control-lora-v3-main" / "modelli"
    )
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9+38-9#r4a%#q@p9j@pivb$95_$f@n(w8*0*b6(bvlna-sk4_!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'menu_app',  # Custom app for the menu
    'glass_maker',  # Main app for the project
    'generator_app',  # App for image generation
    'trainer_app',   # App for training LoRA models
    'widget_tweaks' # For adding CSS classes to form fields
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # Middleware for language support
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'glass_maker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.i18n',  # for internationalization
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'glass_maker.wsgi.application'

# Authentication backends
LOGIN_URL = 'login'
# dove andare dopo il login, se non Ã¨ passato ?next=...
LOGIN_REDIRECT_URL = 'home'      # nome della tua view dashboard
LOGOUT_REDIRECT_URL = 'home'     # opzionale: dove andare dopo il logout



# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "designmaker",
        "USER": "design",
        "PASSWORD": "secret",
        "HOST": "localhost",
        "PORT": "5432",
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

USE_I18N = True

LANGUAGES = [
    ('it', 'Italiano'),
    ('en', 'English'),
]

LANGUAGE_CODE = 'it'           # lingua di default

LOCALE_PATHS = [
    BASE_DIR / 'locale',       # qui verranno generate le traduzioni
]


TIME_ZONE = "Europe/Rome"
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Dove salvare dataset e LoRA
MEDIA_URL = "/media/" # URL per accedere ai media


# Modelli di base selezionabili (nome visibile -> percorso locale o HF id)
LORA_BASE_MODELS = {
    "SD 1.5 (runwayml)": "runwayml/stable-diffusion-v1-5",
    "Realistic Vision 4.0": "SG161222/Realistic_Vision_V4.0_noVAE",
    # "SDXL (facoltativo)": "stabilityai/stable-diffusion-xl-base-1.0",
}

# Comando CLI per lanciare il training (PLUGGABLE)
TRAIN_PY = sys.executable
TRAIN_SCRIPT = os.environ.get(
    "TRAIN_SCRIPT",
    str(BASE_DIR.parent / "progetto-tesi-control-lora-v3-main" / "tools" / "train_lora_cli.py"),
)

TRAIN_CWD = str(_Path(TRAIN_SCRIPT).parent)

TRAIN_CMD = (
    f'"{TRAIN_PY}" -u "{TRAIN_SCRIPT}" '
    '--base "{base_model}" --dataset "{dataset_dir}" --out "{out_dir}" '
    "--steps {steps} --rank {rank} --lr {lr}"
)


# Celery settings
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"

CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True


